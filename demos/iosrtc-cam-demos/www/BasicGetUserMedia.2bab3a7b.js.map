{"version":3,"sources":["components/demos/BasicGetUserMedia/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;eAEe,MAAK;AAClB,QAAM,KAAK,GAAG,eAAM,SAAN,EAAd;;AAEA,QAAM,WAAW,GAAG,YAAW;AAC7B,QAAI,CAAC,KAAK,CAAC,OAAX,EAAoB;AACpB,UAAM,WAAW,GAA+B;AAC9C,MAAA,KAAK,EAAE,KADuC;AAE9C,MAAA,KAAK,EAAE;AAFuC,KAAhD;;AAIA,QAAI;AACF,YAAM,MAAM,GAAG,MAAM,SAAS,CAAC,YAAV,CAAuB,YAAvB,CAAoC,WAApC,CAArB;AACA,YAAM,WAAW,GAAG,MAAM,CAAC,cAAP,EAApB;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,8BAAZ,EAA4C,WAA5C;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,uBAAuB,WAAW,CAAC,CAAD,CAAX,CAAe,KAAK,EAAvD;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,MAAZ;AACA,MAAA,KAAK,CAAC,OAAN,CAAc,SAAd,GAA0B,MAA1B;AACD,KAPD,CAOE,OAAO,CAAP,EAAU;AACV,UAAI,CAAC,CAAC,IAAF,KAAW,6BAAf,EAA8C;AAC5C,cAAM,CAAC,GAAG,WAAW,CAAC,KAAtB;AACA,QAAA,OAAO,CAAC,KAAR,CACE,kBAAkB,CAAC,CAAC,KAAF,CAAQ,KAAK,IAAI,CAAC,CAAC,MAAF,CAAS,KAAK,sCADnD;AAGD,OALD,MAKO,IAAI,CAAC,CAAC,IAAF,KAAW,uBAAf,EAAwC;AAC7C,QAAA,OAAO,CAAC,KAAR,CACE,8DACE,mEADF,GAEE,6BAHJ;AAKD;;AACD,MAAA,OAAO,CAAC,KAAR,CAAc,uBAAuB,CAAC,CAAC,IAAI,EAA3C,EAA+C,CAA/C;AACD;AACF,GA5BD;;AA8BA,SACE,eAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EACE,eAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,cAAA,CADF,EAGE,eAAA,aAAA,CAAA,OAAA,EAAA;AAAO,IAAA,EAAE,EAAC,WAAV;AAAsB,IAAA,QAAQ,EAAA,IAA9B;AAA+B,IAAA,WAAW,EAAA,IAA1C;AAA2C,IAAA,GAAG,EAAE;AAAhD,GAAA,CAHF,EAIE,eAAA,aAAA,CAAA,QAAA,EAAA;AAAQ,IAAA,EAAE,EAAC,WAAX;AAAuB,IAAA,OAAO,EAAE;AAAhC,GAAA,EAA2C,aAA3C,CAJF,CADF;AAUD","file":"BasicGetUserMedia.2bab3a7b.js","sourceRoot":"../src","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nexport default () => {\n  const video = React.createRef<HTMLVideoElement>()\n\n  const handleClick = async () => {\n    if (!video.current) return\n    const constraints: { audio: any; video: any } = {\n      audio: false,\n      video: true\n    }\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia(constraints)\n      const videoTracks = stream.getVideoTracks()\n      console.log('Got stream with constraints:', constraints)\n      console.log(`Using video device: ${videoTracks[0].label}`)\n      console.log(stream)\n      video.current.srcObject = stream\n    } catch (e) {\n      if (e.name === 'ConstraintNotSatisfiedError') {\n        const v = constraints.video\n        console.error(\n          `The resolution ${v.width.exact}x${v.height.exact} px is not supported by your device.`\n        )\n      } else if (e.name === 'PermissionDeniedError') {\n        console.error(\n          'Permissions have not been granted to use your camera and ' +\n            'microphone, you need to allow the page access to your devices in ' +\n            'order for the demo to work.'\n        )\n      }\n      console.error(`getUserMedia error: ${e.name}`, e)\n    }\n  }\n\n  return (\n    <div>\n      <h1>getUserMedia</h1>\n\n      <video id=\"gum-local\" autoPlay playsInline ref={video}></video>\n      <button id=\"showVideo\" onClick={handleClick}>\n        Open camera\n      </button>\n    </div>\n  )\n}\n"]}