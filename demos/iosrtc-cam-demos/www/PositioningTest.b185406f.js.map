{"version":3,"sources":["components/demos/PositioningTest/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;eAEe,MAAK;AAClB,QAAM,KAAK,GAAG,eAAM,SAAN,EAAd;;AAEA,wBAAU,MAAK;AACb;;AAAC,KAAC,YAAW;AACX,UAAI,CAAC,KAAK,CAAC,OAAX,EAAoB;AACpB,YAAM,WAAW,GAA+B;AAC9C,QAAA,KAAK,EAAE,KADuC;AAE9C,QAAA,KAAK,EAAE;AAFuC,OAAhD;;AAIA,UAAI;AACF,cAAM,MAAM,GAAG,MAAM,SAAS,CAAC,YAAV,CAAuB,YAAvB,CAAoC,WAApC,CAArB;AACA,cAAM,WAAW,GAAG,MAAM,CAAC,cAAP,EAApB;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,8BAAZ,EAA4C,WAA5C;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,uBAAuB,WAAW,CAAC,CAAD,CAAX,CAAe,KAAK,EAAvD;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,MAAZ;AACA,QAAA,KAAK,CAAC,OAAN,CAAc,SAAd,GAA0B,MAA1B;AACD,OAPD,CAOE,OAAO,CAAP,EAAU;AACV,YAAI,CAAC,CAAC,IAAF,KAAW,6BAAf,EAA8C;AAC5C,gBAAM,CAAC,GAAG,WAAW,CAAC,KAAtB;AACA,UAAA,OAAO,CAAC,KAAR,CACE,kBAAkB,CAAC,CAAC,KAAF,CAAQ,KAAK,IAAI,CAAC,CAAC,MAAF,CAAS,KAAK,sCADnD;AAGD,SALD,MAKO,IAAI,CAAC,CAAC,IAAF,KAAW,uBAAf,EAAwC;AAC7C,UAAA,OAAO,CAAC,KAAR,CACE,8DACE,mEADF,GAEE,6BAHJ;AAKD;;AACD,QAAA,OAAO,CAAC,KAAR,CAAc,uBAAuB,CAAC,CAAC,IAAI,EAA3C,EAA+C,CAA/C;AACD;AACF,KA5BA;AA6BF,GA9BD,EA8BG,CAAC,KAAK,CAAC,OAAP,CA9BH;AAgCA,SACE,eAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,KAAK,EAAE;AAAE,MAAA,MAAM,EAAE,SAAV;AAAqB,MAAA,UAAU,EAAE;AAAjC;AAAZ,GAAA,EACE,eAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,kBAAA,CADF,EAEE,eAAA,aAAA,CAAA,OAAA,EAAA;AACE,IAAA,QAAQ,EAAA,IADV;AAEE,IAAA,WAAW,EAAA,IAFb;AAGE,IAAA,GAAG,EAAE,KAHP;AAIE,IAAA,KAAK,EAAE;AAAE,MAAA,eAAe,EAAE;AAAnB;AAJT,GAAA,CAFF,CADF;AAWD","file":"PositioningTest.b185406f.js","sourceRoot":"../src","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nexport default () => {\n  const video = React.createRef<HTMLVideoElement>()\n\n  useEffect(() => {\n    ;(async () => {\n      if (!video.current) return\n      const constraints: { audio: any; video: any } = {\n        audio: false,\n        video: true\n      }\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia(constraints)\n        const videoTracks = stream.getVideoTracks()\n        console.log('Got stream with constraints:', constraints)\n        console.log(`Using video device: ${videoTracks[0].label}`)\n        console.log(stream)\n        video.current.srcObject = stream\n      } catch (e) {\n        if (e.name === 'ConstraintNotSatisfiedError') {\n          const v = constraints.video\n          console.error(\n            `The resolution ${v.width.exact}x${v.height.exact} px is not supported by your device.`\n          )\n        } else if (e.name === 'PermissionDeniedError') {\n          console.error(\n            'Permissions have not been granted to use your camera and ' +\n              'microphone, you need to allow the page access to your devices in ' +\n              'order for the demo to work.'\n          )\n        }\n        console.error(`getUserMedia error: ${e.name}`, e)\n      }\n    })()\n  }, [video.current])\n\n  return (\n    <div style={{ height: '10000px', paddingTop: 20 }}>\n      <h1>Positioning Test</h1>\n      <video\n        autoPlay\n        playsInline\n        ref={video}\n        style={{ backgroundColor: 'green' }}\n      ></video>\n    </div>\n  )\n}\n"]}